<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mark&#39;s Blog</title>
    <link>http://mlavi.github.io/post/</link>
    <description>Recent content in Posts on Mark&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 10 Apr 2015 08:44:19 -0700</lastBuildDate>
    <atom:link href="http://mlavi.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Building the LAMP stack with Phing</title>
      <link>http://mlavi.github.io/post/build-lamp-stack-with-phing/</link>
      <pubDate>Fri, 10 Apr 2015 08:44:19 -0700</pubDate>
      
      <guid>http://mlavi.github.io/post/build-lamp-stack-with-phing/</guid>
      <description>

&lt;p&gt;A flashback to 2007 with a tangible artifact in my journey to infrastructure as code: building the LAMP stack with Phing.&lt;/p&gt;

&lt;h3 id=&#34;migration-of-technology-stacks:1d44784f593e898273702c2689a01985&#34;&gt;Migration of Technology Stacks&lt;/h3&gt;

&lt;p&gt;I was the webmaster (Senior Producer, Web Team in the Information Technology department of Silicon Graphics: SGI)
from 2005-2011, which is to say I designed and implemented improvements to web content, management, publishing,
revision control, infrastructure, web programming, extranet design, application service provider integration and more.&lt;/p&gt;

&lt;p&gt;I transitioned our server (and desktop) infrastructure from IRIX on MIPS architecture to SuSE Linux on Intel Itanium2 architecture, allowing folks to move to Windows laptops. It was not shocking to find many
tools and packages were not ported to the new platform, Operating System distribution packages could lag behind
in security releases or never receive upgrades, so I happily resorted to building from source and benefit
from open source licensing.&lt;/p&gt;

&lt;p&gt;Previously, during my independent consulting years, I had moved technology web stacks from SINO to LAMP:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SINO:&lt;/strong&gt; Solaris, Informix, Netscape, Oracle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LAMP:&lt;/strong&gt; Linux, Apache, MySQL/Postgres, PERL/PHP/Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g.: From Netscape Enterprise Web Server to Apache, Informix and Oracle to MySQL, PERL to PHP, and I had been building this web stack on both Solaris and Linux.&lt;/p&gt;

&lt;h3 id=&#34;migration-of-build-methods:1d44784f593e898273702c2689a01985&#34;&gt;Migration of Build Methods&lt;/h3&gt;

&lt;p&gt;I had an ever growing shell script to perform the package builds and I refactored it for the release numbers and
the deployment directory to be variable driven. Although my build script was a brittle monstrosity without any
conditionally or intelligence, it was the right approach towards infrastructure as code!&lt;/p&gt;

&lt;p&gt;My manager asked how I would document and share the build process for others at SGI to repurpose my work,
so I consulted my colleagues and they suggested make files. I looked at make systems and liked Ant, an XML
based build file, but to customize Ant required Java programming or beanshell (a la Groovy) scriptability
which I explored. I really liked an Ant dependency graph generator that leveraged GraphViz called
&lt;a href=&#34;http://vizant.sourceforge.net&#34;&gt;VizAnt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ultimately, I found an Ant implementation written in PHP called &lt;a href=&#34;http://phing.info&#34;&gt;Phing&lt;/a&gt; (PHing Is Not GNU make)
allowing me to reuse some Ant tools (a benefit of using XML as a data structure) and I have been happy with the solution.&lt;/p&gt;

&lt;p&gt;I called the project &amp;ldquo;webplatform&amp;rdquo; and refactored my monolithic build shell script to Phing. Now I could:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;correct errors faster via Phing&amp;rsquo;s XML validation&lt;/li&gt;
&lt;li&gt;share my work with others by using a centralized repository&lt;/li&gt;
&lt;li&gt;leverage build targets composed from the appropriate mix of software:

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Internet server:&lt;/strong&gt; an optimized, reduced web stack&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DMZ server:&lt;/strong&gt; minimal and secure web stack&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Intranet server:&lt;/strong&gt; a kitchen sink (everything) configuration web stack&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;respond in hours to incorporate any security patch directly from the software projects without waiting
for the upstream operating system provider to back-port and distribute&lt;/li&gt;
&lt;li&gt;communicate my work because the code was documented and visualizable, e.g.:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://mlavi.github.io/img/webplatform.ant.phing-guts.png&#34; alt=&#34;Webplatform build target dependency diagram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I wrote one Phing extension called &amp;ldquo;MyUnpack.&amp;rdquo; Given any software package release version, it would:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;determine if a current or future release was already installed in the destination directory,

&lt;ul&gt;
&lt;li&gt;optionally searching the operating system.&lt;/li&gt;
&lt;li&gt;utilizing a number of methods to determine the existing version because every project could be different.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If not up to date, it would then extract the software package and signal to continue the build process.
Otherwise, signal to skip building this up to date software package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I practiced object oriented coding and adopted PHP Code Sniffer to improve my coding style.
I was on the way to continuous integration&amp;hellip; but I didn&amp;rsquo;t finish that part of the project.&lt;/p&gt;

&lt;p&gt;My contributions back to open source included documentation for Phing (I became a committer)
and identifying, testing, and confirming a fix to broken OpenSSL builds on Itanium2.&lt;/p&gt;

&lt;p&gt;I hope to open source the webplatform project one day.&lt;/p&gt;

&lt;h3 id=&#34;sgi-appendix:1d44784f593e898273702c2689a01985&#34;&gt;SGI Appendix&lt;/h3&gt;

&lt;p&gt;Some fun challenges and SGI trivia:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sgi.com&#34;&gt;http://sgi.com&lt;/a&gt; was one of the first web sites I ever saw with &lt;a href=&#34;http://en.wikipedia.org/wiki/Mosaic_(web_browser&#34;&gt;NCSA Mosaic&lt;/a&gt;
on the web back in 1993. The banner of the home
page of www.sgi.com was called &amp;ldquo;Silicon Surf&amp;rdquo; and displayed a metallic robot surfing on the ocean, which was
also a reference to SGI&amp;rsquo;s ground breaking graphic rendering, powering the earliest days of computer graphic
imagery (CGI) in Hollywood, pioneered by Lucasfilm&amp;rsquo;s Industrial Light and Magic (ILM) with SGI workstations:
think &lt;a href=&#34;https://en.wikipedia.org/wiki/Terminator_2:_Judgment_Day#Effects&#34;&gt;Terminator 2&lt;/a&gt;.
The act of browsing the world wide web was called &amp;ldquo;web surfing&amp;rdquo; in those early days
and SGI nicknamed the web team the Surf Team.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/19970605011712/http://www.sgi.com/&#34;&gt;Archived home page from 1997&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ll see if I can dig up that original image, I think I have the poster.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;SGI engineering has created an in-house improved, centralized revision control system on top of
&lt;a href=&#34;https://en.wikipedia.org/wiki/Revision_Control_System&#34;&gt;RCS&lt;/a&gt;,
one of the earliest, local file Unix revision control systems. It could be thought of a
cousin and functional equivalent to &lt;a href=&#34;https://en.wikipedia.org/wiki/Concurrent_Versions_System&#34;&gt;CVS&lt;/a&gt;
because it used RCS format files in the repository.
However, it ran only on &lt;a href=&#34;https://en.wikipedia.org/wiki/IRIX&#34;&gt;IRIX&lt;/a&gt;, which was SGI&amp;rsquo;s flavor of
Unix for the MIPS CPU family, and Engineering did not have a road map to port it to Linux. Despite SGI already transitioning from IRIX to Linux, they had not decided to end of life IRIX at that time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was working to move us from SGI O2&amp;rsquo;s (IRIX) on every web developer&amp;rsquo;s desk to Linux or Windows laptops
to modernize our tech stack, desktops, and tools. Some people stayed on IRIX and that was absolutely fine:
our solution was based on open standards and transports.&lt;/li&gt;
&lt;li&gt;After examining Mercurial, I moved us our team to
&lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_Subversion&#34;&gt;Subversion (svn)&lt;/a&gt;
because it represented a straightforward migration without a major change in context for our web developers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Container Infrastructure Strategy</title>
      <link>http://mlavi.github.io/post/container-infrastructure-strategy/</link>
      <pubDate>Sat, 04 Apr 2015 07:55:39 -0700</pubDate>
      
      <guid>http://mlavi.github.io/post/container-infrastructure-strategy/</guid>
      <description>

&lt;p&gt;In these early years of containers, &amp;ldquo;heavy containers&amp;rdquo; represent a typical approach which
resembles virtual machines, includes the operating system user land, and desires configuration
management. Does this represent the opposite of container promise and immutable infrastructure?&lt;/p&gt;

&lt;h3 id=&#34;heavy-containers:9b4c54333bd97e87ce05878dcf4182cb&#34;&gt;Heavy Containers&lt;/h3&gt;

&lt;p&gt;I have been researching containers for years, I encountered &lt;a href=&#34;https://pantheon.io/blog/why-we-built-pantheon-containers-instead-virtual-machines&#34;&gt;an early mention for Drupal CMS hosting&lt;/a&gt;
 probably a year before I heard about Docker. I had worked with chroot jails earlier in my career,
 but &lt;a href=&#34;http://docker.com&#34;&gt;Docker&lt;/a&gt; made LXC containers easy to use, just as &lt;a href=&#34;http://vagrantup.com&#34;&gt;Vagrant&lt;/a&gt;
 had done for Virtual Machines.&lt;/p&gt;

&lt;p&gt;For the sake of simplifying this discussion, I will not discuss dynamic runtime configuration: it is the
subject of a future blog post. We will approximate it via static application configuration.&lt;/p&gt;

&lt;p&gt;An ideal container holds an application and nothing more: the tricky part is defining your application
and its dependencies. If you look at the full stack an application may be composed, you would consider
the data, code, runtime configuration, server facility, and further dependencies. e.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code: /var/www/virtualhost.example.com/microserviceRoute

&lt;ul&gt;
&lt;li&gt;code libraries: /var/www/shared/language/framework-version&lt;/li&gt;
&lt;li&gt;static application configuration data: /var/www/shared/configuration/databasepassword.inc.txt&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;server facility: (e.g.: Apache-2.4.x)

&lt;ul&gt;
&lt;li&gt;server binaries: /usr/bin/local/apache2**&lt;/li&gt;
&lt;li&gt;server configuration: /etc/apache2/**&lt;/li&gt;
&lt;li&gt;server runtime configuration: /etc/defaults/apache2&lt;/li&gt;
&lt;li&gt;server startup customization: /etc/init/apache2-custom&lt;/li&gt;
&lt;li&gt;server plug-ins: mod_php, mod_ssl, etc.&lt;/li&gt;
&lt;li&gt;server plug-in dependencies: openssl, php, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;runtime facilities: (e.g. PHP)

&lt;ul&gt;
&lt;li&gt;language runtime binaries: /usr/bin/local/php-5.x&lt;/li&gt;
&lt;li&gt;language runtime configuration: /etc/php.ini&lt;/li&gt;
&lt;li&gt;language runtime dependencies: openssl, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is desirable to bundle all of these things together as a full stack, static deployment unit,
making your application portable and self-contained (ha ha).
There is a challenge to decide the scope of a container because of the natural tendency
to follow the dependencies and bundle all into the container, which weighs it down.&lt;/p&gt;

&lt;p&gt;In fact, the initial jumping off point most people use for their containers (today) is a full
Linux operating system distribution, which I call a &amp;ldquo;heavy container,&amp;rdquo; because it contains
everything and resembles an entire virtual machine (VM):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grep -e FROM -e RUN Dockerfile
FROM ubuntu:14.04.2
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y somePackage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This scope (equivalent to a VM) is natural until you are comfortable with containers,
 then you are ready for container re-factoring and layering. There is a notion of linked
 and data containers which I&amp;rsquo;ll explore later, but what would we re-factor and why?&lt;/p&gt;

&lt;h3 id=&#34;container-re-factoring:9b4c54333bd97e87ce05878dcf4182cb&#34;&gt;Container Re-factoring&lt;/h3&gt;

&lt;p&gt;This is an incomplete thought: I will continue and reorganize it.&lt;/p&gt;

&lt;p&gt;Like all things, you must address your audience. For developers, a developer container might have everything
needed for production but also add troubleshooting and development tools. For production, we would use the
lighter version of the developer container by omitting the extras accomplishing a minimal difference
between dev and prod!&lt;/p&gt;

&lt;p&gt;We can accomplish this by separating containers into layers, where each
&lt;a href=&#34;http://docs.docker.com/terms/layer/&#34;&gt;container layer&lt;/a&gt; is a container unto itself and
&lt;a href=&#34;http://docs.docker.com/reference/builder/#from&#34;&gt;they can be added together&lt;/a&gt; to compose a bigger container.&lt;/p&gt;

&lt;p&gt;Therefore, each container layer could represent an area of expertise which models how your organization
manages resources and would progress with different development cadence. e.g.:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;your system administrators might take care of the base OS&lt;/li&gt;
&lt;li&gt;your network team might address firewall and networking concerns,&lt;/li&gt;
&lt;li&gt;your server developer team might take care of the server runtime and dependencies,&lt;/li&gt;
&lt;li&gt;your DevOps team could address configuration, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reusing the expertise in your organization suggests a good model to start from and
allows independent iteration of each concern in a container layer.&lt;/p&gt;

&lt;p&gt;We can then build a robust container that dynamically invokes its dependent layers, allowing each
to iterate as needed, reducing complexity for a single, monolithic build and risk for rapid deployment.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s explore that idea in more detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FROM minimalist/OS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because every guest container resides on a container host OS, refactoring should take into account
the container runtime and container host facilities. This becomes interesting if you&amp;rsquo;ve picked
a minimal Linux distribution such as &lt;a href=&#34;http://coreos.com/&#34;&gt;CoreOS&lt;/a&gt;,
&lt;a href=&#34;https://github.com/phusion/passenger-docker#why_use&#34;&gt;Passenger-docker&lt;/a&gt;,
&lt;a href=&#34;http://rancher.com/rancher-os/&#34;&gt;RancherOS&lt;/a&gt;, or etc. because they are optimized to run containers
(i.e. boot to container). This is a clue that we shouldn&amp;rsquo;t need to bind a full OS user land into a container,
although it is awesome that we can and we should use this for developing our first containers
with sshd and more.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FROM server/facility&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because your server facility or runtime typically do not change unless there is a new release
which contains a security, performance, or feature fix, this is the next candidate for removal
from a container. This likely includes the server dependencies (libraries and other run-times).&lt;/p&gt;

&lt;p&gt;However, the run-time configuration of this server facility could be dynamic
so I would consider that data and a layer closer to the application. In fact, it would be
ideal to make dynamic run-time configuration a service and pull it out of the application
container.&lt;/p&gt;

&lt;p&gt;The idea is that the server facility is a separate layer from our application: it iterates
on a different time line and probably is an infrastructure engineer concern, so why weigh down
an application container layer with it?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FROM developer/tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Diagnostic and troubleshooting tools and facilities such as SSH, logging, metrics, and monitoring
are also heavy items and external to the application: these are services which likely reside
on the container host, external to the container host, or in another container.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FROM application/service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we get to the application itself: it has dependencies such as runtime configuration
and libraries. Those can be externalized from the application because they are a layer which
iterates on a separate time line.&lt;/p&gt;

&lt;p&gt;I would advocate that we compose all of these layers during container build time versus the
standard approach we use the first time we build a container with Docker: using RUN to shell out
and perform installation and configuration tasks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=M9hBsRUeRdg&#34;&gt;This idea was introduced&lt;/a&gt;
at the &lt;a href=&#34;http://www.meetup.com/coreos/events/215452012/&#34;&gt;CoreOS Meetup&lt;/a&gt;
by James Russell, DevOps engineer at Sony Computer Entertainment America, DevNet Team.
It has been further explored by a talk called
&amp;ldquo;Exploring Strategies for Minimal Containerization&amp;rdquo; by Brian &amp;ldquo;Red beard&amp;rdquo; Harrington,
Principal Architect at CoreOS, but I only found &lt;a href=&#34;https://www.youtube.com/watch?v=P3sO9URqOhE&#34;&gt;a partial reference&lt;/a&gt;
at a recent Container Days keynote.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most use of RUN represents a duplication of effort that I abhor:&lt;/strong&gt;
&lt;a href=&#34;http://mlavi.github.io/post/build-lamp-stack-with-phing/#migration-of-build-methods:1d44784f593e898273702c2689a01985&#34;&gt;because configuration by shell is something we have done before&lt;/a&gt;
 as a first level approximation to solve the problem. Many of us now use configuration management,
 which is a field comprised of tools known as Ansible, CF Engine, Chef, Puppet, Salt, and more.&lt;/p&gt;

&lt;p&gt;However, configuration management is typically invoked after deployment of a resource during run-time,
but Dockerfiles are invoked in the build domain. I have been exploring this strategic gap between the
VM and the container for months without resolution. I went to ChefConf 2015 and asked this question
but didn&amp;rsquo;t find an answer because I think there is a fundamental divide
between immutable infrastructure (of ephemeral containers) and configuration management of
persistent infrastructure (which is longer lived).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configuration management of a container host, that makes sense to me.&lt;/li&gt;
&lt;li&gt;Configuration management inside a container guest, that is a heavy container (and doesn&amp;rsquo;t make
ultimate sense to me).&lt;/li&gt;
&lt;li&gt;Configuration management to build a container, that makes sense to me, &lt;em&gt;but I haven&amp;rsquo;t found it
yet.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reusing our configuration management code so we can use it to build a container or a VM makes sense.&lt;/p&gt;

&lt;p&gt;Could it be as simple as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RUN puppet agent apply&lt;/li&gt;
&lt;li&gt;RUN chef-solo -c ~/solo.rb -j ~/node.json&lt;/li&gt;
&lt;li&gt;etc?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;immutable-infrastructure-versus-configuration-management-build-time-versus-run-time:9b4c54333bd97e87ce05878dcf4182cb&#34;&gt;Immutable Infrastructure versus Configuration Management: build-time versus run-time&lt;/h3&gt;

&lt;p&gt;I want to reuse my configuration management to build a container rather than use shell
commands which represent the lowest level primitive of configuration management functionality.&lt;/p&gt;

&lt;p&gt;One of the benefits of configuration management is that you perform periodic runs
to sync and update configuration, allowing drift correction and auditing of the configured system.
This implies a longer-lived, persistent system and we find that the &amp;ldquo;heavier&amp;rdquo; the system is,
the more useful this model becomes to maintain run state.&lt;/p&gt;

&lt;p&gt;If a system is immutable, constrained to an application code artifact, and continuously deployed
thousands of times a day &amp;ndash; do we need configuration management sync and updates? I like configuration
management to be used during build time for artifacts and only as an option during run-time of those artifacts.
I arrived at this viewpoint recently during a discussion with HashiCorp&amp;rsquo;s CTO, Armon Dadgar, because
it is exactly the use case established with Vagrant to develop and test your configuration management,
but use &lt;a href=&#34;https://packer.io/docs/builders/docker.html&#34;&gt;Packer to exclusively build your container artifact&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It appears this approach is also endorsed by
&lt;a href=&#34;http://www.ansible.com/blog/ansible-and-containers-why-and-how&#34;&gt;Ansible&lt;/a&gt; and
&lt;a href=&#34;https://docs.chef.io/containers.html&#34;&gt;Chef&lt;/a&gt;
while potentially supported by &lt;a href=&#34;https://puppetlabs.com/blog/simplify-managing-docker-puppet&#34;&gt;Puppet&lt;/a&gt;
and &lt;a href=&#34;http://saltstack.com/saltstack-delivers-more-automation-docker-lxc-application-containers/&#34;&gt;SaltStack&lt;/a&gt;,
but I think we can say this needs some more thought and evangelism.&lt;/p&gt;

&lt;h3 id=&#34;container-deployment-and-orchestration:9b4c54333bd97e87ce05878dcf4182cb&#34;&gt;Container Deployment and Orchestration&lt;/h3&gt;

&lt;p&gt;Container deployment and orchestration becomes the next issue: do you use Mesos, Kubernetes,
or some other scheduler to inform your load balancer, DNS, monitoring, and service discovery and
dynamic configuration management systems that a tested official build artifact is ready?&lt;/p&gt;

&lt;p&gt;Containers in production are easy when used for the single tier of a web application which
is immutable and hopefully modeled as a micro-service. But orchestration of complex roll out
of an entire service and medley of services and applications along with persistent data sources
is another problem I hope to tackle soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DevOps BTD Pattern for Continuous Deployment</title>
      <link>http://mlavi.github.io/post/devops-btd-pattern/</link>
      <pubDate>Wed, 18 Mar 2015 21:02:15 -0700</pubDate>
      
      <guid>http://mlavi.github.io/post/devops-btd-pattern/</guid>
      <description>

&lt;p&gt;What happens when you find the same macro and micro pattern in your automation diagram?
 You reinforce your goals to improve code flow and service design on the way to test driven development!&lt;/p&gt;

&lt;h3 id=&#34;code-flow-and-service-design:8496744675100c630db0dc665f90a3a3&#34;&gt;Code Flow and Service Design&lt;/h3&gt;

&lt;p&gt;I created the &lt;a href=&#34;../devops-automation/&#34;&gt;DevOps Automation Diagram&lt;/a&gt; to map out the flow of code from
developer to production in a wholly automated manner: better known as continuous deployment.&lt;/p&gt;

&lt;p&gt;This map represents the software development life cycle, service deployment, and feedback loops that are
integral to service design. I did this so that I could figure out where best to start work for my
infrastructure as code project and I found a few optimizations by re-factoring the code flow and
moving processes forward in the chain of events.&lt;/p&gt;

&lt;p&gt;In doing so, I describe a journey that spans different disciplines of build, test, and deployment:
areas that have been traditionally separated into team or department silos because they represent
the pillars or domains of software development, quality assurance, and operations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mlavi.github.io/img/btd-pattern-traditional.dia.png&#34; alt=&#34;BTD Silos - 2015-03-18&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Those traditional silos create code friction by introducing manual hand offs and insulating teams
from shared responsibilities, creating barriers to proper service design and life cycle considerations.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;It&amp;rsquo;s not my job,&amp;rdquo; &amp;ldquo;it works on my laptop,&amp;rdquo; and &amp;ldquo;I don&amp;rsquo;t like the [other team&amp;rsquo;s] attitude&amp;rdquo; are
verbal indications of code friction. They are blockers for engineers on any team or any domain
to embrace their responsibility for service design over the entire life cycle of code.&lt;/p&gt;

&lt;h3 id=&#34;btd-build-test-deploy-pattern:8496744675100c630db0dc665f90a3a3&#34;&gt;BTD: Build, Test, Deploy Pattern&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ve talked about breaking down the traditional walls between software development, quality assurance,
and operations by describing a responsibility for all of these teams to embrace all of the disciplines
of BTD (build, test, and deployment) in order to become proper service designers.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Build:&lt;/strong&gt; SoftwareDeveloper codes functionality and &lt;em&gt;builds&lt;/em&gt; the code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test:&lt;/strong&gt; QualityAssurance creates &lt;em&gt;tests&lt;/em&gt; for the build artifacts&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deploy:&lt;/strong&gt; Operations &lt;em&gt;deploys&lt;/em&gt; the artifacts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I call this the BTD pattern, &lt;strong&gt;but astute readers will note it should be the TBD pattern&lt;/strong&gt; because we want to achieve test driven development of code, tests, and operations.&lt;/p&gt;

&lt;p&gt;BTD is nothing revelatory, it is the traditional pipeline for software development.
The &lt;a href=&#34;../devops-automation/&#34;&gt;DevOps Automation Diagram&lt;/a&gt; at a high level &lt;em&gt;is&lt;/em&gt; a BTD pattern,
but we will examine it further and find that BTD should exist in each domain.&lt;/p&gt;

&lt;p&gt;What is wrong with the BTD pattern? Nothing except how it has been implemented as traditional roles and hand-offs, e.g.:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mlavi.github.io/img/btd_silos.pu.png&#34; alt=&#34;BTD Silos - 2015-03-18&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&amp;hellip;you can see the traditional silos and you can see all of the potential inefficiencies to remedy a bug.
The cost and time to fix increases the further the bug is discovered from the developer.&lt;/p&gt;

&lt;h3 id=&#34;devops-btd-pattern-for-continuous-deployment:8496744675100c630db0dc665f90a3a3&#34;&gt;DevOps BTD Pattern for Continuous Deployment&lt;/h3&gt;

&lt;p&gt;We need to prevent bugs from happening in deployment, in test, and in development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Did operations create a deployment bug? How did they test it?&lt;/li&gt;
&lt;li&gt;Did quality assurance develop a good test? How do you test the tests?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;BTD must be applied at the build domain, at the test domain, and at the deploy domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mlavi.github.io/img/btd-pattern.dia.png&#34; alt=&#34;BTD Pattern - 2015-03-18&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;This is why everything is testable, buildable, and deployable on the developer laptop in the
&lt;a href=&#34;../devops-automation/&#34;&gt;DevOps Automation Diagram&lt;/a&gt;.
The traditional software developer or recent college graduate, system administrator, or quality engineer
does not code tests, code deployment, and code builds, then test deployments and test builds &amp;ndash; &lt;strong&gt;but they should!&lt;/strong&gt;
The DevOps engineer must test monitors, deployments, and builds as well.
This expanded skill set must be part of the engineering culture for service design and imbued into all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SoftwareDeveloper&lt;/strong&gt; codes and performs BTD:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;BDD feature descriptions (with help from product management, customer support, and sales)&lt;/li&gt;
&lt;li&gt;TDD unit test cases + test data (with help from QualityAssurance)&lt;/li&gt;
&lt;li&gt;Build jobs&lt;/li&gt;
&lt;li&gt;Functionality&lt;/li&gt;
&lt;li&gt;Related logs, metrics, and monitors for internal SLAs (with help from Operations)&lt;/li&gt;
&lt;li&gt;Deployable and configurable artifacts (with help from Operations)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;QualityAssurance&lt;/strong&gt; codes and performs BTD:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Test plan&lt;/li&gt;
&lt;li&gt;Test cases and test data (with help from SoftwareDevelopers) that leverage logs, monitors, and metrics&lt;/li&gt;
&lt;li&gt;Test and periodic test jobs&lt;/li&gt;
&lt;li&gt;Integration tests (with help from SoftwareDevelopers)&lt;/li&gt;
&lt;li&gt;Deployment tests (with help from Operations)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Operations&lt;/strong&gt; codes and performs BTD:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Deployment Tools and tests&lt;/li&gt;
&lt;li&gt;Server OS builds, run times, and dependencies&lt;/li&gt;
&lt;li&gt;Configuration Management and tests&lt;/li&gt;
&lt;li&gt;Deployment Orchestration (automated run books) and tests&lt;/li&gt;
&lt;li&gt;Monitors and escalations (which are akin to integration tests)&lt;/li&gt;
&lt;li&gt;Logging and Metric reports (which are akin to service level agreements)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I am sure there is more, but this is a very good start to a robust service design organization for continuous deployment!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Today&#39;s DevOps Automation Diagram</title>
      <link>http://mlavi.github.io/post/devops-automation/</link>
      <pubDate>Wed, 11 Mar 2015 10:35:41 -0700</pubDate>
      
      <guid>http://mlavi.github.io/post/devops-automation/</guid>
      <description>

&lt;p&gt;#shipit and #failfast: I want to share and discuss the DevOps Automation Diagram for continuous deployment.
Via open source and this blog, we can elevate the state of our software engineering and service design!&lt;/p&gt;

&lt;h3 id=&#34;quotes-and-motivation:32baa83692157fcb17c74c92c7c38e39&#34;&gt;Quotes and Motivation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Perfect is the enemy of good.&amp;rdquo; &amp;ndash;&lt;a href=&#34;http://en.wikiquote.org/wiki/Perfection&#34;&gt;Volare&lt;/a&gt; (paraphrased)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Fail fast.&amp;rdquo; &amp;ndash;&lt;a href=&#34;http://en.wikiquote.org/wiki/Ward_Cunningham#The_Simplest_Thing_that_Could_Possibly_Work&#34;&gt;Ward Cunningham&lt;/a&gt;
(paraphrased as &lt;a href=&#34;https://twitter.com/hashtag/failfast&#34;&gt;#failfast&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;I hope to replace myself with a tiny shell script one day.&amp;rdquo; &amp;ndash;Unknown Internet meme?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ship it and fail fast: I would love to get feedback! I also wonder if anyone can improve my quote attributions.&lt;/p&gt;

&lt;p&gt;Here is today&amp;rsquo;s snapshot of the entire DevOps Automation Diagram source and image.
I&amp;rsquo;ve omitted many possible connections for the sake of showing
the optimal automated progression from a developer&amp;rsquo;s mind to the production stack.
I&amp;rsquo;ve refactored terminology to help inform systems and actions, but you can see there are
many moving pieces to enable modern day software development life cycle automation,
some of which are not easily identified off the shelf.&lt;/p&gt;

&lt;p&gt;You can &amp;ldquo;view the SVG image&amp;rdquo; in a new browser window or tab and scale it to your liking
and then cut and paste text from it.&lt;/p&gt;

&lt;h3 id=&#34;updated:32baa83692157fcb17c74c92c7c38e39&#34;&gt;Updated!&lt;/h3&gt;

&lt;p&gt;My original release was 2015-03-11 (source below), but today&amp;rsquo;s update adds detail, removes many crossed lines
for simple visual flow parsing, and is organized vertically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mlavi.github.io/img/devops_automation.pu.svg&#34; alt=&#34;DevOps Automation Diagram - 2015-03-17&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Source code: devops_automation.pu
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;startuml&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DevOps&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Automation&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2015&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;by&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Mark&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Lavi&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Development&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Development&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;language&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Development&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;editor&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Development&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;tools&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Development&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;environment&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Development&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;runtime&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Development&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;frameworks&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Development&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;libraries&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BDD&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTest&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BDD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;featureDescription&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;featureDescription&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;testCases&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;testData&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;functionality&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;configurationData&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;deployability&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;monitors&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;metrics&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;logs&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;OnSave&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BDD&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalBuild&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Code&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalRepo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;commit&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalRepo&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;testCases&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;testData&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalBuild&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalStack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalBuild&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;localArtifact&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalBuild&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;localTestJobs&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalBuild&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;localBuildAutomationSystemContainer&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalBuild&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ArtifactRepository&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;manual&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;nDesk&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ncandidate&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalRepo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalRepo&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CodeRepository&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;push&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalStack&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalDeployTest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalStack&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;LocalIntegrationTest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CodeRepository&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;CodeRepository&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;branch&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;CodeRepository&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;hash&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;CodeRepository&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;tag&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;preCommitHook&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildAutomationSystem&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;preCommitHook&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;see&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;postCommitHook&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildAutomationSystem&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;postCommitHook&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;see&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;webHook&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;see&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Build&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;master&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;branches&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;candidate&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CodeRepository&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;N&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;passed&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildJob&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TestJob&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DeployJob&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;HumanReview&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ReviewSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;PeriodicTestJobs&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildAutomationSystem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;perBranch&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;perHash&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;perTag&lt;/span&gt;  
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildScheduler&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildJobs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ad&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;hoc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;manual&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DeployJobs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;promote&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildJobs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildJobs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ArtifactRepository&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Candidate&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildJobs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;localArtifact&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ConfigurationSystem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;updateManifest&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ArtifactRepository&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Official&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;PeriodicTests&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;BasicCodeAcceptanceTests&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeployJobs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;up&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeployJobs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;artifact&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeployJobs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;manifest&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeployJobs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;stack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeployJobs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ConfigurationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;updateManifest&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildScheduler&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TestJobs&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;BuildScheduler&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Nightly&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DeployJobs&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Simulator&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;FeatureIntegrationTesting&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;FullSuiteTesting&lt;/span&gt;  
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;LoadTesting&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;RegressionTesting&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;SoakTesting&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAutomationSystem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ConfigurationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;updateManifest&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ArtifactRepository&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ArtifactRepository&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;candidate&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ArtifactRepository&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;official&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ConfigurationSystem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ConfigurationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;manifest&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ConfigurationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;deployability&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ConfigurationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;configurationData&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Monitors&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Monitors&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;SLA&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Monitors&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Metrics&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Monitors&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Logs&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Logs&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Logs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Metrics&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Logs&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Monitors&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Metrics&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Metrics&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;SLA&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;AuthenticationSystem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;AuthenticationSystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;LDAP&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;SAML&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;etc&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ConfigurationSystem&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;entireStack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;byProfileOnStack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;byRoleOnStack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;updateManifest&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;bill&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;materials&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;BoM&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;DeploySystem&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;readConfigurationData&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Provision&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Stack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Provision&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;profile&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Provision&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applyManifest&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Upgrade&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Stack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Upgrade&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Upgrade&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applyManifest&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Canary&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Stack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Canary&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;existing&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stack&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Canary&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;applyManifest&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Stack&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;Stack&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;environment&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Feature&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Team&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Release&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dev&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;qa&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;stage&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;prod&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ProviderInfrastructure&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ProviderInfrastructure&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;balancer&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ProviderInfrastructure&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DNS&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ProviderInfrastructure&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;monitor&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ProviderInfrastructure&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;scheduler&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;autoscaler&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ProviderInfrastructure&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Monitors&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;ProviderInfrastructure&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;provider&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;profile&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;role&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;monitor&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Monitors&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Logs&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;node&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Metrics&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;@&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;enduml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I will put this under revision control in the Infrastructure as Code project I&amp;rsquo;m undertaking.
I do not believe authored hyperlinks export to SVG yet, perhaps that will be my first request for PlantUML.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A DevOps Automation State Diagram</title>
      <link>http://mlavi.github.io/post/diagram/</link>
      <pubDate>Tue, 10 Mar 2015 23:16:27 -0700</pubDate>
      
      <guid>http://mlavi.github.io/post/diagram/</guid>
      <description>

&lt;p&gt;Wonderful accomplishments kicked-off my Infrastructure as Code project.
One needs to start with a map of the world before deciding where to focus their efforts.
It&amp;rsquo;s even better when you can optimize and render the new map in real-time!&lt;/p&gt;

&lt;h3 id=&#34;beautiful-tool-and-diagram:9ae74c72486689c2be9e15358622329b&#34;&gt;Beautiful Tool and Diagram&lt;/h3&gt;

&lt;p&gt;I found and created two wonderful things today:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I found exactly the tool I have been looking for over the years!
I used Wikipedia and &lt;a href=&#34;http://alternativeto.net&#34;&gt;alternativeTo&lt;/a&gt; to survey the market for competitors
to my favorite open source object drawing tool, &lt;a href=&#34;https://wiki.gnome.org/Apps/Dia&#34;&gt;Dia&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The following snapshot shows authoring a work-in-progress diagram&amp;hellip; I&amp;rsquo;ve been trying to create this
for a quite a while and I&amp;rsquo;m glad to have the time to do it properly.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://mlavi.github.io/img/devops-automation-screenshot.png&#34; alt=&#34;DevOps Automation Diagram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The DevOps mission to reduce all friction between the developer&amp;rsquo;s code and deployment to production
is mostly captured by this diagram. It has been in my head for a while, extended past but based on
work with my colleagues at Pertino. It is mostly complete, a bit of an eye-chart, and I want to
improve the flow by reducing crossing lines. Working on this as a state diagram has yielded some
insight into improvements, optimization, and bottlenecks. I plan to release the source file as part
of my infrastructure as code project.&lt;/p&gt;

&lt;p&gt;I made it with &lt;a href=&#34;http://www.plantuml.com/eclipse.html&#34;&gt;PlantUML in Eclipse with GraphViz&lt;/a&gt; with a view
rendering the results on the fly (no need to save) which felt like unit testing my diagram!
This allowed me to iterate frequently with text rather than graphics: brilliant and yet
another example as infrastructure as code. :~) My standby object drawing program, Dia,
would have done the trick as well, perhaps even better from a layout crossing lines perspective,
but re-factoring would have been slower. Re-factoring was key in making improvements and I could
perform analysis on my arrow layout hints, e.g.: &lt;code&gt;$ grep &amp;lsquo;&amp;ndash;&amp;gt;&amp;rsquo; | wc &amp;ndash;lines&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll update with the final product soon: you will be able to view the SVG image in a new browser
window or tab, then scale it to your liking. I&amp;rsquo;m very happy with the results of performing this work
with open source software and formats (currently 45Kb SVG which allows you to copy the text of the
diagram) for flexibility and performance.&lt;/p&gt;

&lt;h3 id=&#34;update:9ae74c72486689c2be9e15358622329b&#34;&gt;UPDATE&lt;/h3&gt;

&lt;p&gt;Please see the &lt;a href=&#34;../devops-automation/&#34;&gt;next posting&lt;/a&gt; for the &amp;ldquo;final&amp;rdquo; product.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Time for a new development project!</title>
      <link>http://mlavi.github.io/post/first/</link>
      <pubDate>Fri, 06 Mar 2015 14:11:47 -0800</pubDate>
      
      <guid>http://mlavi.github.io/post/first/</guid>
      <description>

&lt;p&gt;What does one do when laid off? You need to scratch that itch and address the things
that are in the back of your head and occasionally keep you awake at night. Technical dreams
and technical debt follow as I start my Infrastructure as Code blog.&lt;/p&gt;

&lt;p&gt;Embarking on a new adventure is always the best time in a project because all your dreams
 are possible! You research your ideas, find new tools and libraries, and smell the fresh
 scent of unhindered development.&lt;/p&gt;

&lt;h3 id=&#34;then-you-start:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Then you start&amp;hellip;&lt;/h3&gt;

&lt;p&gt;You find that your idea is broad and multifaceted, tools are in various states of acceptable
 use and documentation, and there is a bevy of dependencies: each representing a small
 landscape to conquer.&lt;/p&gt;

&lt;h3 id=&#34;to-sink-into-reality:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;&amp;hellip; to sink into reality!&lt;/h3&gt;

&lt;p&gt;The original title of this first post was &amp;ldquo;Time for a new Blog&amp;rdquo; to document my experiment
 with &lt;a href=&#34;http://jekyllrb.com/docs/github-pages/&#34;&gt;Jekyll and Github Pages&lt;/a&gt; before settling on
 &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;Hugo&lt;/a&gt;: it has been a fascinating study in scope creep.&lt;/p&gt;

&lt;p&gt;But I&amp;rsquo;m prototyping, so it&amp;rsquo;s all good, right?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll update later with how I&amp;rsquo;ve navigated the static web site blog quest, thus far it has been an
 exercise in transferring most of the standard content management system functionality into
 smaller tools and libraries which inverts the work flow. I think the journey will be worth
 it because I&amp;rsquo;ve caught glimpses which validate this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I can blog from the command line and presumably anywhere (including my phone) with some setup.&lt;/li&gt;
&lt;li&gt;I can test the build of my content, templates, and enhanced work on those elements.&lt;/li&gt;
&lt;li&gt;Everything under revision control, therefore: blog + content = testable software!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-static-web-cms:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;A Static Web CMS?&lt;/h3&gt;

&lt;p&gt;Even though I&amp;rsquo;ve accomplished much with various web content management systems (CMS) such as
 Joomla, WordPress, Drupal, and ModX over the years, you inevitably fall &lt;em&gt;out of love&lt;/em&gt; after
 the first month with complex and brittle software. Will it happen again?&lt;/p&gt;

&lt;p&gt;A static, compiled web site removes and loses dynamic, server-side functionality for persistence and
interaction, or does it? With the advent of application service providers (ASP) or cloud hosted
anything-as-a-service, we can move from server-side to service providers for comments and
who knows what else? In addition, we can leverage improved web client capabilities to shift
what was server-side to client-side processing.&lt;/p&gt;

&lt;p&gt;This will be a great experiment!&lt;/p&gt;

&lt;h3 id=&#34;infrastructure-as-code:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Infrastructure as Code&lt;/h3&gt;

&lt;p&gt;The real purpose of this blog will be to catalog and share my research and development towards my passion:
Infrastructure as Code. It is a ripe time for system and design thinking because the entire industry is
trying to solve basic problems and automate their solution while integrating many different systems and
disciplines. It is an exciting and disruptive time!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>